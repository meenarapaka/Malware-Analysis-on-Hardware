#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
plt.rcParams['figure.figsize'] = (10.0, 8.0)
import seaborn as sns

from sklearn.svm import SVC
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score


# In[2]:


Malware= pd.read_excel("../624/malware dataset.xlsx")
Malware.head()


# In[3]:


Malware.isnull().any()
Malware['instructions']=Malware['instructions'].fillna(Malware['instructions'].mean())
Malware.describe()


# In[4]:


#bar plot for independent vs target variable
for i in Malware.columns:
    if i!='class':
        fig = plt.figure(figsize = (10,6))
        sns.barplot(x = 'class', y = i, data = Malware)


# In[5]:


#Distribution of target variable
sns.countplot(Malware['class'])


# In[6]:


from sklearn.preprocessing import LabelEncoder
le_color = LabelEncoder()
Malware['class'] = le_color.fit_transform(Malware['class'])
Malware['class'].unique()


# In[7]:


print(Malware.columns)


# In[8]:


X = Malware.iloc[:, :-1].values  

y = Malware.iloc[:,-1:].values  


# In[9]:


from imblearn.over_sampling import SMOTE

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

sm = SMOTE(random_state=2)
X_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())


# In[10]:


from sklearn.ensemble import RandomForestClassifier

classifier = RandomForestClassifier(max_depth=10, random_state=0)
classifier.fit(X_train, y_train)  
y_pred = classifier.predict(X_test)


# In[11]:


from sklearn.metrics import confusion_matrix  
from sklearn.metrics import accuracy_score
# from sklearn.metrics import recall 

cm = confusion_matrix(y_test, y_pred)  
print(cm)  
print('Accuracy' + str(accuracy_score(y_test, y_pred))) 


from sklearn.metrics import classification_report

report = classification_report(y_test, y_pred)
print(report)


# In[12]:


# Fitting Decision Tree Classification to the Training set
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
treeclassifier = DecisionTreeClassifier(criterion = 'gini', random_state = 8, splitter = 'random')
treeclassifier.fit(X_train_res, y_train_res.ravel())

Y_pred = treeclassifier.predict(X_test)
from sklearn.metrics import confusion_matrix  
from sklearn.metrics import accuracy_score
# from sklearn.metrics import recall 

cm = confusion_matrix(y_test, Y_pred)  
print(cm)  
print('Accuracy' + str(accuracy_score(y_test, Y_pred))) 


from sklearn.metrics import classification_report

report = classification_report(y_test, y_pred)
print(report)


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




